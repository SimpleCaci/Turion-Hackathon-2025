import requests
import json
import os
from datetime import datetime, timedelta
from urllib.parse import quote

class HorizonsAPI:
    """
    Class to interact with the JPL Horizons API to fetch ephemeris data
    for spacecraft and celestial bodies
    """
    
    BASE_URL = "https://ssd.jpl.nasa.gov/api/horizons.api"
    
    def __init__(self):
        """Initialize the HorizonsAPI class"""
        # Load mission data
        try:
            script_dir = os.path.dirname(os.path.abspath(__file__))
            with open(os.path.join(script_dir, 'missions.json'), 'r') as f:
                self.mission_data = json.load(f)
                print(f"Successfully loaded missions.json with {len(self.mission_data.get('missions', []))} missions")
        except FileNotFoundError as e:
            print(f"Error: missions.json not found: {e}")
            self.mission_data = {"missions": [], "celestialObjects": []}
        except Exception as e:
            print(f"Error loading missions.json: {e}")
            self.mission_data = {"missions": [], "celestialObjects": []}
    
    def get_object_position(self, object_id, start_time=None, stop_time=None):
        """
        Fetch position data for a specified object
        
        Args:
            object_id (str): The ID of the object in Horizons system
            start_time (str): Optional start time in 'YYYY-MM-DD' format
            stop_time (str): Optional end time in 'YYYY-MM-DD' format
            
        Returns:
            dict: Position data for the object
        """
        print(f"Fetching position for object ID: {object_id}")
        
        # Set default times if not provided
        if start_time is None:
            start_time = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
        if stop_time is None:
            stop_time = datetime.now().strftime('%Y-%m-%d')
        
        # Construct the API request parameters
        params = {
            'format': 'json',
            'COMMAND': f"'{object_id}'",
            'OBJ_DATA': "'YES'",
            'MAKE_EPHEM': "'YES'",
            'EPHEM_TYPE': "'VECTORS'",
            'CENTER': "'500@0'",  # Sun-centered coordinates
            'START_TIME': f"'{start_time}'",
            'STOP_TIME': f"'{stop_time}'",
            'STEP_SIZE': "'1 d'",  # 1-day steps
            'QUANTITIES': "'1,2,3'"  # Position components
        }
        
        try:
            # For testing/development - provide mock data if we can't reach the API
            if object_id.startswith('-'):  # It's a spacecraft
                # Return simple mock data for spacecraft
                print(f"Using mock data for spacecraft {object_id}")
                return [
                    {
                        "timestamp": datetime.now().strftime("%Y-%m-%d"),
                        "x": float(object_id) * -0.1,  # Use ID to create varied positions
                        "y": float(object_id) * 0.05,
                        "z": float(object_id) * -0.02
                    }
                ]
            
            # Real API call for celestial bodies
            print(f"Making API request to {self.BASE_URL} for {object_id}")
            response = requests.get(
                self.BASE_URL,
                params=params
            )
            
            if response.status_code == 200:
                result = self._parse_vector_response(response.text)
                print(f"Received {len(result)} position points for {object_id}")
                return result
            else:
                print(f"Error fetching data: {response.status_code}, {response.text}")
                return None
                
        except Exception as e:
            print(f"Exception occurred fetching position: {str(e)}")
            return None
    
    def get_object_trajectory(self, object_id, days=365):
        """
        Get the trajectory (position at multiple timestamps) for an object
        
        Args:
            object_id (str): The ID of the object in Horizons system
            days (int): Number of days to calculate trajectory for
            
        Returns:
            list: List of position data points
        """
        # Calculate start and end dates
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days)
        
        # Fetch position data
        return self.get_object_position(
            object_id,
            start_time=start_date.strftime('%Y-%m-%d'),
            stop_time=end_date.strftime('%Y-%m-%d')
        )
    
    def get_all_active_missions(self):
        """
        Get position data for all active missions
        
        Returns:
            dict: Dictionary mapping mission IDs to their position data
        """
        results = {}
        
        for mission in self.mission_data.get("missions", []):
            if mission.get("status") == "Active":
                mission_id = mission.get("id")
                position_data = self.get_object_position(mission_id)
                if position_data:
                    results[mission_id] = {
                        "name": mission.get("name"),
                        "position": position_data
                    }
        
        return results
    
    def _parse_vector_response(self, response_text):
        """
        Parse the vector response from Horizons API
        
        Args:
            response_text (str): The API response text
            
        Returns:
            list: Extracted position vectors
        """
        try:
            data = json.loads(response_text)
            result_text = data.get('result', '')
            
            # Extract position vectors from the result text
            positions = []
            lines = result_text.strip().split('\n')
            
            vector_data_started = False
            for line in lines:
                # Look for the line that indicates the start of vector data
                if "$$SOE" in line:
                    vector_data_started = True
                    continue
                if "$$EOE" in line:
                    break
                    
                if vector_data_started and line.strip():
                    # Parse the vector data line
                    try:
                        # Split by whitespace and extract X, Y, Z components
                        parts = line.strip().split(',')
                        if len(parts) >= 4:  # Timestamp + at least 3 components
                            time_str = parts[1].strip()
                            x = float(parts[2].strip())
                            y = float(parts[3].strip())
                            z = float(parts[4].strip())
                            
                            positions.append({
                                "timestamp": time_str,
                                "x": x,
                                "y": y,
                                "z": z
                            })
                    except (ValueError, IndexError) as e:
                        print(f"Error parsing line: {line}, error: {str(e)}")
            
            return positions
            
        except json.JSONDecodeError:
            print("Failed to parse JSON response")
            return []
        except Exception as e:
            print(f"Error parsing response: {str(e)}")
            return []

# Simple test if run directly
if __name__ == "__main__":
    api = HorizonsAPI()
    
    # Test with Voyager 1
    voyager_data = api.get_object_position("-31")
    if voyager_data:
        print(f"Received {len(voyager_data)} position points for Voyager 1")
        print(voyager_data[0] if voyager_data else "No data")
